// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DemoClient is the client API for Demo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DemoClient interface {
	Login(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	Register(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	AddBlog(ctx context.Context, in *AddBlogRequest, opts ...grpc.CallOption) (*AddBlogResponse, error)
	ListBlog(ctx context.Context, in *ListBlogRequest, opts ...grpc.CallOption) (*ListBlogResponse, error)
	GetBlog(ctx context.Context, in *GetBlogRequest, opts ...grpc.CallOption) (*GetBlogResponse, error)
	Follow(ctx context.Context, in *FollowRequest, opts ...grpc.CallOption) (*Response, error)
	IsFollow(ctx context.Context, in *FollowRequest, opts ...grpc.CallOption) (*CheckResponse, error)
	GetUserBlog(ctx context.Context, in *UserBlogRequest, opts ...grpc.CallOption) (*ListBlogResponse, error)
	GetUserFollowed(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*ListUserResponse, error)
	GetUserFollower(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*ListUserResponse, error)
	GetFollowBlog(ctx context.Context, in *UserBlogRequest, opts ...grpc.CallOption) (*ListBlogResponse, error)
}

type demoClient struct {
	cc grpc.ClientConnInterface
}

func NewDemoClient(cc grpc.ClientConnInterface) DemoClient {
	return &demoClient{cc}
}

func (c *demoClient) Login(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, "/demo.Demo/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoClient) Register(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, "/demo.Demo/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoClient) AddBlog(ctx context.Context, in *AddBlogRequest, opts ...grpc.CallOption) (*AddBlogResponse, error) {
	out := new(AddBlogResponse)
	err := c.cc.Invoke(ctx, "/demo.Demo/AddBlog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoClient) ListBlog(ctx context.Context, in *ListBlogRequest, opts ...grpc.CallOption) (*ListBlogResponse, error) {
	out := new(ListBlogResponse)
	err := c.cc.Invoke(ctx, "/demo.Demo/ListBlog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoClient) GetBlog(ctx context.Context, in *GetBlogRequest, opts ...grpc.CallOption) (*GetBlogResponse, error) {
	out := new(GetBlogResponse)
	err := c.cc.Invoke(ctx, "/demo.Demo/GetBlog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoClient) Follow(ctx context.Context, in *FollowRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/demo.Demo/Follow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoClient) IsFollow(ctx context.Context, in *FollowRequest, opts ...grpc.CallOption) (*CheckResponse, error) {
	out := new(CheckResponse)
	err := c.cc.Invoke(ctx, "/demo.Demo/IsFollow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoClient) GetUserBlog(ctx context.Context, in *UserBlogRequest, opts ...grpc.CallOption) (*ListBlogResponse, error) {
	out := new(ListBlogResponse)
	err := c.cc.Invoke(ctx, "/demo.Demo/GetUserBlog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoClient) GetUserFollowed(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*ListUserResponse, error) {
	out := new(ListUserResponse)
	err := c.cc.Invoke(ctx, "/demo.Demo/GetUserFollowed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoClient) GetUserFollower(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*ListUserResponse, error) {
	out := new(ListUserResponse)
	err := c.cc.Invoke(ctx, "/demo.Demo/GetUserFollower", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoClient) GetFollowBlog(ctx context.Context, in *UserBlogRequest, opts ...grpc.CallOption) (*ListBlogResponse, error) {
	out := new(ListBlogResponse)
	err := c.cc.Invoke(ctx, "/demo.Demo/GetFollowBlog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DemoServer is the server API for Demo service.
// All implementations must embed UnimplementedDemoServer
// for forward compatibility
type DemoServer interface {
	Login(context.Context, *AuthRequest) (*AuthResponse, error)
	Register(context.Context, *AuthRequest) (*AuthResponse, error)
	AddBlog(context.Context, *AddBlogRequest) (*AddBlogResponse, error)
	ListBlog(context.Context, *ListBlogRequest) (*ListBlogResponse, error)
	GetBlog(context.Context, *GetBlogRequest) (*GetBlogResponse, error)
	Follow(context.Context, *FollowRequest) (*Response, error)
	IsFollow(context.Context, *FollowRequest) (*CheckResponse, error)
	GetUserBlog(context.Context, *UserBlogRequest) (*ListBlogResponse, error)
	GetUserFollowed(context.Context, *UserRequest) (*ListUserResponse, error)
	GetUserFollower(context.Context, *UserRequest) (*ListUserResponse, error)
	GetFollowBlog(context.Context, *UserBlogRequest) (*ListBlogResponse, error)
	mustEmbedUnimplementedDemoServer()
}

// UnimplementedDemoServer must be embedded to have forward compatible implementations.
type UnimplementedDemoServer struct {
}

func (UnimplementedDemoServer) Login(context.Context, *AuthRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedDemoServer) Register(context.Context, *AuthRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedDemoServer) AddBlog(context.Context, *AddBlogRequest) (*AddBlogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBlog not implemented")
}
func (UnimplementedDemoServer) ListBlog(context.Context, *ListBlogRequest) (*ListBlogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBlog not implemented")
}
func (UnimplementedDemoServer) GetBlog(context.Context, *GetBlogRequest) (*GetBlogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlog not implemented")
}
func (UnimplementedDemoServer) Follow(context.Context, *FollowRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Follow not implemented")
}
func (UnimplementedDemoServer) IsFollow(context.Context, *FollowRequest) (*CheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsFollow not implemented")
}
func (UnimplementedDemoServer) GetUserBlog(context.Context, *UserBlogRequest) (*ListBlogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBlog not implemented")
}
func (UnimplementedDemoServer) GetUserFollowed(context.Context, *UserRequest) (*ListUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFollowed not implemented")
}
func (UnimplementedDemoServer) GetUserFollower(context.Context, *UserRequest) (*ListUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFollower not implemented")
}
func (UnimplementedDemoServer) GetFollowBlog(context.Context, *UserBlogRequest) (*ListBlogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowBlog not implemented")
}
func (UnimplementedDemoServer) mustEmbedUnimplementedDemoServer() {}

// UnsafeDemoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DemoServer will
// result in compilation errors.
type UnsafeDemoServer interface {
	mustEmbedUnimplementedDemoServer()
}

func RegisterDemoServer(s grpc.ServiceRegistrar, srv DemoServer) {
	s.RegisterService(&Demo_ServiceDesc, srv)
}

func _Demo_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.Demo/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoServer).Login(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Demo_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.Demo/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoServer).Register(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Demo_AddBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBlogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoServer).AddBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.Demo/AddBlog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoServer).AddBlog(ctx, req.(*AddBlogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Demo_ListBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBlogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoServer).ListBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.Demo/ListBlog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoServer).ListBlog(ctx, req.(*ListBlogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Demo_GetBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoServer).GetBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.Demo/GetBlog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoServer).GetBlog(ctx, req.(*GetBlogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Demo_Follow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoServer).Follow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.Demo/Follow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoServer).Follow(ctx, req.(*FollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Demo_IsFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoServer).IsFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.Demo/IsFollow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoServer).IsFollow(ctx, req.(*FollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Demo_GetUserBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserBlogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoServer).GetUserBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.Demo/GetUserBlog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoServer).GetUserBlog(ctx, req.(*UserBlogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Demo_GetUserFollowed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoServer).GetUserFollowed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.Demo/GetUserFollowed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoServer).GetUserFollowed(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Demo_GetUserFollower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoServer).GetUserFollower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.Demo/GetUserFollower",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoServer).GetUserFollower(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Demo_GetFollowBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserBlogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoServer).GetFollowBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.Demo/GetFollowBlog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoServer).GetFollowBlog(ctx, req.(*UserBlogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Demo_ServiceDesc is the grpc.ServiceDesc for Demo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Demo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "demo.Demo",
	HandlerType: (*DemoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Demo_Login_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _Demo_Register_Handler,
		},
		{
			MethodName: "AddBlog",
			Handler:    _Demo_AddBlog_Handler,
		},
		{
			MethodName: "ListBlog",
			Handler:    _Demo_ListBlog_Handler,
		},
		{
			MethodName: "GetBlog",
			Handler:    _Demo_GetBlog_Handler,
		},
		{
			MethodName: "Follow",
			Handler:    _Demo_Follow_Handler,
		},
		{
			MethodName: "IsFollow",
			Handler:    _Demo_IsFollow_Handler,
		},
		{
			MethodName: "GetUserBlog",
			Handler:    _Demo_GetUserBlog_Handler,
		},
		{
			MethodName: "GetUserFollowed",
			Handler:    _Demo_GetUserFollowed_Handler,
		},
		{
			MethodName: "GetUserFollower",
			Handler:    _Demo_GetUserFollower_Handler,
		},
		{
			MethodName: "GetFollowBlog",
			Handler:    _Demo_GetFollowBlog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "demo.proto",
}
